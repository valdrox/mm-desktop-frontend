/*
auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { useRef, useState, useEffect } from "react";
import { useGLTF } from "@react-three/drei/useGLTF";
import { TransformControls } from "@react-three/drei";

export default function Screw(props) {
	const transform = useRef();

	const [hover, setHover] = useState(false);
	const [controlMode, setControlMode] = useState("rotate");

	const { nodes } = useGLTF("/screw2.glb");

	useEffect(() => {
		if (transform.current) {
			const controls = transform.current;

			/*const onKeyDown = (event) => {
				switch (event.keyCode) {
					case 32: // space bar
						if (controls.getMode() === "rotate") {
							setControlMode("translate");
						} else if (controls.getMode() === "translate") {
							setControlMode("scale");
						} else {
							setControlMode("rotate");
						}
						break;
					default:
						break;
				}
			};*/

			if(props.controlMode !== ""){
				setControlMode(props.controlMode)
				controls.setMode(controlMode)
			}


			//if(props.isSelected) {
			//document.addEventListener("keydown", onKeyDown);
			//}

			controls.addEventListener(
				"objectChange",
				props.onDrag
			);

			if (props.onTransform) {
				controls.addEventListener(
					"dragging-changed",
					props.onTransform
				);
			}

			return () => {
				//document.removeEventListener("keydown", onKeyDown);
				if (props.onTransform) {
					controls.removeEventListener(
						"dragging-changed",
						props.onTransform
					);
				}
				controls.removeEventListener(
					"objectChange",
					props.onDrag
				);
			};
		}
	});


	function executeOnClicks(event){
		props.onClick();
		props.selectControlModeOverlay(controlMode);
		//props.updateInitialPosition(event.eventObject.parent.position);
		//props.updateInitialRotation(event.eventObject.parent.rotation);
	}

	return (
		<TransformControls
			ref={transform}
			enabled={props.isSelected}
			showX={props.isSelected}
			showY={props.isSelected}
			showZ={props.isSelected}
			{...props}
		>

			<mesh
				/* material={nodes.mesh_0.material} */
				geometry={nodes.mesh_0.geometry}
				onClick={executeOnClicks}
				onPointerOver={(e) => setHover(true)}
				onPointerOut={(e) => setHover(false)}
				rotation={[0.03, 0.13, -1.48]}
			>
				<meshStandardMaterial color={hover ? "#3399ff" : "gray"}/>
			</mesh>
		</TransformControls>//0.22, 0.19 , -1.29 //0.47 0.19
	);
}

useGLTF.preload("/screw2.glb");